<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TransformService.tt" #>

///////////////////////////////////////////////////////////////////////////
//Generated DbContext is saved in Textran.Data.Access\Context folder     //
///////////////////////////////////////////////////////////////////////////
<#
string contextName = "TexTranContext";
var directory = Path.GetDirectoryName(this.Host.TemplateFile);
var contextFolder = Regex.Replace(directory, "(?<=src).+$", @"\TexTran.Data.Access\Context");
var entityFolder = Regex.Replace(directory,"(?<=src).+$", @"\TexTran.Data.Abstractions\Entities");

/* Get entities */
var entityPaths = Directory.GetFiles(entityFolder);
var entities = entityPaths.Select(x => Path.GetFileName(x));

/* Remove current DbContext before regenerate */
RemoveFilesFromFolder(contextFolder);

var stringBuilder = new StringBuilder();
stringBuilder.AppendLine(@"// This code is auto generated. Changes to this file will be lost!");
stringBuilder.AppendLine(@"using Microsoft.EntityFrameworkCore;");
stringBuilder.AppendLine(@"using TexTran.Data.Abstractions.Entities;");
stringBuilder.AppendLine("");
stringBuilder.AppendLine("namespace TextTran.Data.Access.Context");
stringBuilder.AppendLine("{");
stringBuilder.AppendLine("	public class TextTranContext : DbContext");
stringBuilder.AppendLine("	{");
stringBuilder.AppendLine("		public TextTranContext(DbContextOptions options) : base(options) { }");
stringBuilder.AppendLine("");

/*TODO: DbSets */

foreach (var item in entities)
{
	var entity = item.Replace(".cs", "");
	stringBuilder.AppendLine($"		public DbSet<{entity}> {entity}s {{ get; set; }}");
}

stringBuilder.AppendLine("	}");
stringBuilder.AppendLine("}");

/* Write to folder */
WriteToFolder(contextFolder, contextName, stringBuilder.ToString());
#>