<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TransformService.tt" #>
/////////////////////////////////////////////////////////////////////
//This code is auto-generated. Changes to this file will be lost! //
/////////////////////////////////////////////////////////////////////
using System;

namespace TextTran.Transformations.Models
{
<#
string path = this.Host.ResolvePath(@"..\Definitions\Models.txt");
var lines = File.ReadLines(path).ToArray();

List<ModelDefinition> models = GenerateModels(lines); 
foreach (var model in models)
{
#>
	public class <#= model.Name #>
	{
<#
	foreach (var property in model.Properties)
	{
#>
		public <#= property.Type #> <#= property.Name #> { get; set; }

<# 
	}
#>
	}

<#
}
#>
}

<#+
public List<ModelDefinition> GenerateModels(string[] lines)
{
	List<ModelDefinition> result = new List<ModelDefinition>();
	var lineNumber = -1;

	foreach(var line in lines)
	{
		lineNumber++;
		if (String.IsNullOrEmpty(line)) continue;
		
		var match = Regex.Match(line, @"^\s+");

		if(!match.Success)
		{
			var model = new ModelDefinition
			{
				Name = line,
				Properties = GetProperties(lineNumber, lines)
			};

			result.Add(model);
		}
	}
	return result;
}

public PropertyDefinition[] GetProperties(int lineNumber, string[] lines)
{
	List<PropertyDefinition> properties = new List<PropertyDefinition>();

	for (var i = lineNumber + 1; i < lines.Length; i++)
	{
		var match = Regex.Match(lines[i], @"^\s+(?<name>[^:]+):(?<type>[^\s]+)");

		if (match.Success)
		{
				properties.Add(new PropertyDefinition(match.Groups["name"].Value, match.Groups["type"].Value ));
		}
		else
		{
			break;
		}
	}
	return properties.ToArray();
}

/* Models */

public class ModelDefinition
{
	public string Name { get; set; }
	public PropertyDefinition[] Properties { get; set; }
}

public class PropertyDefinition
{
	public PropertyDefinition(string name, string type)
	{
		Name = name;
		Type = type;
	}

	public string Name { get; set; }
	public string Type { get; set; }
}
#>
