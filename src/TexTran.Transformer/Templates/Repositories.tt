<#@ include file="TransformBuilders.ttinclude" #><##><#
if (entityNames != null)
{
RemoveFilesFromFolder(repositoryFolder);
RemoveFilesFromFolder(repositoryInterfaceFolder);
foreach (var entity in entityNames)
{
	BuildDbContext(contextName);
	var entityName = entity.Replace(".cs", "");
#>
//This code is auto generated. Changes to this file will be lost!
using System;
using System.Linq;
using TexTran.Data.Abstractions.Interfaces;
using TexTran.Data.Abstractions.Entities;
using TextTran.Data.Access.Context;

namespace TexTran.Data.Access.Repositories
{
	public class <#= entityName #>Repository: I<#= entityName #>Repository
	{
		private readonly <#= contextName #> _context;

		public <#= entityName #>Repository(<#= contextName #> context)
		{
			_context = context;
		}

		public void Add(<#= entityName #> <#= entityName.ToLower() #>)
		{
			_context.<#= entityName #>s.Add(<#= entityName.ToLower() #>);
		}

		public void Delete(<#= entityName #> <#= entityName.ToLower() #>)
		{
			_context.<#= entityName #>s.Remove(<#= entityName.ToLower() #>);
		}

		public void Edit(<#= entityName #> <#= entityName.ToLower() #>)
		{
			var editedEntity = _context.<#= entityName #>s.FirstOrDefault(e => e.Id == <#= entityName.ToLower() #>.Id);
			editedEntity = <#= entityName.ToLower() #>;
		}

		public <#= entityName #> GetById(Guid id)
		{
			return _context.<#= entityName #>s.FirstOrDefault(e => e.Id == id);
		}

		public <#= entityName #>[] GetAll()
		{
			return _context.<#= entityName #>s.ToArray();
		}

		public void SaveChanges() => _context.SaveChanges();
	}
}
<#
SaveFile(repositoryFolder, entityName + "Repository" , this.GenerationEnvironment.ToString());
SaveFile(repositoryInterfaceFolder, "I" + entityName + "Repository", BuildInterface(entityName));
this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>