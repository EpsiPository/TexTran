<#@ include file="Manager.tt" #>
<#
var directory = Path.GetDirectoryName(this.Host.TemplateFile);
var entitiesFolder = Regex.Replace(directory, "(?<=src).+$", @"\TexTran.Data.Abstractions\Entities");
var entityBaseFolder = Regex.Replace(directory, "(?<=src).+$", @"\TexTran.Data.Abstractions\Entities\Base");

var definition = this.Host.ResolvePath(@"..\Definitions\Entities.txt");
var lines = File.ReadLines(definition).ToArray();

RemoveFilesFromFolder(entitiesFolder);

WriteToFolder(entityBaseFolder, "IBaseEntity", CreateBaseEntity());

List<EntityDefinition> entities = GenerateEntities(lines); 

foreach (var entity in entities)
{
	var builder = new StringBuilder();
	builder.AppendLine(@"// This file is auto generated. Changes to this file will be lost!
using System;
using System.Collections.Generic;
	
namespace TexTran.Data.Abstractions.Entities
{");
	if (!string.IsNullOrEmpty(entity.Summary))
	{
	var summary = Regex.Replace(entity.Summary, "// ", "");
		builder.AppendLine($@"	/// <summary>
	/// {summary}
	/// </summary>");
	}
	builder.AppendLine($"	public class {entity.Name}: BaseEntity");
	builder.AppendLine("	{");
	foreach (var property in entity.Properties)
	{
		if (property.Nullable)
		{
			builder.AppendLine($@"		public {property.Type}? {property.Name} {{ get; set; }}
			");
		}
		else
		{
			builder.AppendLine($@"		public {property.Type} {property.Name} {{ get; set; }}
			");
		}
	}
	builder.AppendLine(@"	}
}");

	WriteToFolder(entitiesFolder, entity.Name, builder.ToString());
}
#>
