<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

///////////////////////////////////////////////////////////////////////////
//Generated entities are saved in Textran.Data.Abstractions.Models       //
///////////////////////////////////////////////////////////////////////////

<#
var directory = Path.GetDirectoryName(this.Host.TemplateFile);
var entitiesFolder = Regex.Replace(directory, "(?<=src).+$", @"\TexTran.Data.Abstractions\Entities");

/* Load definitions */
string entities = this.Host.ResolvePath(@"..\Definitions\Entities.txt");
var lines = File.ReadLines(entities).ToArray();

/* Clear Entities folder */
RemoveFilesFromFolder(entitiesFolder);

/* Generate Models */
List<ModelDefinition> models = GenerateModels(lines); 

foreach (var model in models)
{
	var builder = new StringBuilder();
	builder.AppendLine(@"// This file is auto generated. Changes to these files will be lost!
	using System;
	using System.Collections.Generic;
	
	namespace TexTran.Data.Abstractions.Entities
	{");
	builder.AppendLine($"	public class {model.Name}");
	builder.AppendLine("	{");
	foreach (var property in model.Properties)
	{
		builder.AppendLine($"		public {property.Type} {property.Name} {{ get; set; }}");
	}
	builder.AppendLine(@"	}
}");

	/* Write to Entities folder */
	WriteToFolder(entitiesFolder, model.Name, builder.ToString());
}
#>

<#+

/* Methods */
public void WriteToFolder(string folder, string fileName, string content)
{
	using (FileStream fs = new FileStream(Path.Combine(folder, fileName + ".cs"), FileMode.Create))
    {
        using (StreamWriter str = new StreamWriter(fs))
        {
            str.WriteLine(content);
            str.Flush();
        }
    }
}

public void RemoveFilesFromFolder(string path)
{
	Array.ForEach(Directory.GetFiles(path), File.Delete);
}

public List<ModelDefinition> GenerateModels(string[] lines)
{
	List<ModelDefinition> result = new List<ModelDefinition>();
	var lineNumber = -1;

	foreach(var line in lines)
	{
		lineNumber++;
		if (String.IsNullOrEmpty(line)) continue;
		
		var match = Regex.Match(line, @"^\s+");

		if(!match.Success)
		{
			var model = new ModelDefinition
			{
				Name = line,
				Properties = GetProperties(lineNumber, lines)
			};

			result.Add(model);
		}
	}
	return result;
}

public PropertyDefinition[] GetProperties(int lineNumber, string[] lines)
{
	List<PropertyDefinition> properties = new List<PropertyDefinition>();

	for (var i = lineNumber + 1; i < lines.Length; i++)
	{
		var match = Regex.Match(lines[i], @"^\s+(?<name>[^:]+):(?<type>[^\s]+)");

		if (match.Success)
		{
				properties.Add(new PropertyDefinition(match.Groups["name"].Value, match.Groups["type"].Value ));
		}
		else
		{
			break;
		}
	}
	return properties.ToArray();
}

/* Models */

public class ModelDefinition
{
	public string Name { get; set; }
	public PropertyDefinition[] Properties { get; set; }
}

public class PropertyDefinition
{
	public PropertyDefinition(string name, string type)
	{
		Name = name;
		Type = type;
	}

	public string Name { get; set; }
	public string Type { get; set; }
}
#>